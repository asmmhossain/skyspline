// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma; 


// solve_dgdt0
List solve_dgdt0(vec times, vec Fs, vec Ys, vec g0, double Lambda0, double h0, double h1, double A, double Ne, double treeT);
RcppExport SEXP skyspline_solve_dgdt0(SEXP timesSEXP, SEXP FsSEXP, SEXP YsSEXP, SEXP g0SEXP, SEXP Lambda0SEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP ASEXP, SEXP NeSEXP, SEXP treeTSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< vec >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< vec >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< vec >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< double >::type Lambda0(Lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< double >::type treeT(treeTSEXP);
    __result = Rcpp::wrap(solve_dgdt0(times, Fs,  Ys, g0, Lambda0, h0, h1, A, Ne, treeT));
    return __result;
END_RCPP
}
// solve com21l
double solve_CoM12L(vec times, vec Fs, vec Ys
 , double Lambda0 // initial cum hazard
 , double h0
 , double h1
 , double A
); 
RcppExport SEXP skyspline_solve_CoM12L( SEXP timesSEXP, SEXP FsSEXP, SEXP YsSEXP, SEXP Lambda0SEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP ASEXP){
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< vec >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< vec >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< double >::type Lambda0(Lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    __result = Rcpp::wrap(solve_CoM12L(times, Fs,  Ys, Lambda0, h0, h1, A));
    return __result;
END_RCPP
}
// update_lambda_gx_node
List update_lambda_gx_node(double A, double Ne, vec g_x, double y);
RcppExport SEXP skyspline_update_lambda_gx_node(SEXP ASEXP, SEXP NeSEXP, SEXP g_xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< vec >::type g_x(g_xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    __result = Rcpp::wrap(update_lambda_gx_node(A, Ne, g_x, y));
    return __result;
END_RCPP
}
// update_lambda_gx_node2
List update_lambda_gx_node2(double A, double Ne, vec g_x, double y);
RcppExport SEXP skyspline_update_lambda_gx_node2(SEXP ASEXP, SEXP NeSEXP, SEXP g_xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< vec >::type g_x(g_xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    __result = Rcpp::wrap(update_lambda_gx_node2(A, Ne, g_x, y));
    return __result;
END_RCPP
}
// solve_semiPar0
vec solve_semiPar0(double t0, double t1, int res, double y0, vec betas, double gamma, double eps_abs, double eps_rel);
RcppExport SEXP skyspline_solve_semiPar0(SEXP t0SEXP, SEXP t1SEXP, SEXP resSEXP, SEXP y0SEXP, SEXP betasSEXP, SEXP gammaSEXP, SEXP eps_absSEXP, SEXP eps_relSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< int >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< vec >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eps_abs(eps_absSEXP);
    Rcpp::traits::input_parameter< double >::type eps_rel(eps_relSEXP);
    __result = Rcpp::wrap(solve_semiPar0(t0, t1, res, y0, betas, gamma, eps_abs, eps_rel));
    return __result;
END_RCPP
}


// eventTimes2extant
List eventTimes2extant(vec eventTimes, vec nodeheights, vec parentheights);
RcppExport SEXP sourceCpp_0_eventTimes2extant(SEXP eventTimesSEXP, SEXP nodeheightsSEXP, SEXP parentheightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec >::type eventTimes(eventTimesSEXP);
    Rcpp::traits::input_parameter< vec >::type nodeheights(nodeheightsSEXP);
    Rcpp::traits::input_parameter< vec >::type parentheights(parentheightsSEXP);
    __result = Rcpp::wrap(eventTimes2extant(eventTimes, nodeheights, parentheights));
    return __result;
END_RCPP
}
